package main.java.Utils;

import static io.restassured.RestAssured.given;

import java.util.ResourceBundle;
import java.util.logging.Logger;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;

import io.restassured.config.RestAssuredConfig;
import io.restassured.config.SSLConfig;
import io.restassured.response.Response;
import main.java.Utils.RetrieveSQLQuery;

/**
 * 
 * @author a619786
 * 
 * Setup all internal api setup and generate oAuth token
 * 
 */

public class APITestConfig extends RetrieveSQLQuery{
	
	public static Logger log = Logger.getLogger(APITestConfig.class.getName());
	public String userName;
	public String password;
	public String client_id;
	public String client_secret;
	public String grant_type;
	public String scope;
	public String oAuthUrl;
	public String initiateReqURL;
	public String initiateReqURL_PN;
	public String initiateReqURL_PG;
	public String initiateReqURL_SC_AIS_Post;
	public String initiateReqURL_SC_ASC_Post;
	public String initiateReqURL_SC_CSS_Post;
	public String initiateReqURL_SC_ISC_Post;
	public String initiateReqURL_SC_AIS;
	public String initiateReqURL_SC_ASC;
	public String initiateReqURL_SC_CSS;
	public String initiateReqURL_SC_ISC;
	
	public String oAuthToken;
	public ResourceBundle props;
	public Response response;
	public String SCPlanNo_CSS = "1869731";
	
	@BeforeClass
	public void setValues() {
		log.info("Setting values for " + System.getenv("ENV"));
		props = ResourceBundle.getBundle(System.getenv("ENV"));

		userName = props.getString("userName");
		password = props.getString("password");
		client_id = props.getString("client_id");
		client_secret = props.getString("client_secret");
		grant_type = props.getString("grant_type");
		scope = props.getString("scope");
		oAuthUrl = props.getString("oAuthUrl");
		initiateReqURL = props.getString("initiateReqURL");
		initiateReqURL_PN = props.getString("initiateReqURL_PN");
		initiateReqURL_PG = props.getString("initiateReqURL_PG");
		initiateReqURL_SC_AIS_Post = props.getString("initiateReqURL_SC_AIS_Post");
		initiateReqURL_SC_ASC_Post = props.getString("initiateReqURL_SC_ASC_Post");
		initiateReqURL_SC_CSS_Post = props.getString("initiateReqURL_SC_CSS_Post");
		initiateReqURL_SC_ISC_Post = props.getString("initiateReqURL_SC_ISC_Post");
		initiateReqURL_SC_AIS = props.getString("initiateReqURL_SC_AIS");
		initiateReqURL_SC_ASC = props.getString("initiateReqURL_SC_ASC");
		initiateReqURL_SC_CSS = props.getString("initiateReqURL_SC_CSS");
		initiateReqURL_SC_ISC = props.getString("initiateReqURL_SC_ISC");
		log.info("values set");
		oAuthToken=generateOAuthToken();
		
		//RetrieveOfferingCodeGpath.GetData();
	}
	
	// Generating OAuth Connection Security Token's
	public String generateOAuthToken(){
			
		oAuthToken = given()
			.config(RestAssuredConfig.config().sslConfig(SSLConfig.sslConfig().relaxedHTTPSValidation()))
			.params("client_id", client_id, "client_secret", client_secret, "grant_type", grant_type,
					"username", userName, "password", password, "scope", scope)
			.when().post(oAuthUrl).getBody().path("access_token").toString();
		
		return oAuthToken;
	}
	
	public String conversion(String result)
	{
		
	if(result.contains("true")){
		result="Y";
		
	}
	else if(result.contains("false")){
		result="N";
		
	}
	else if(result.equals(null)) {
		result="NA";
	}
	return result;
	}
	
	public String translator(String result)
	{
		
		if(result.equals("[]"))
		{
			result="null";
		}
		else
		{
			return result;
		}
		return result;
	}
	
	public String nulltranslator(String result)
	{
				
		if(result.equals("[]"))
		{
			result="(null)";
		}
		else
		{
			return result;
		}
		return result;
	}
	

}
